[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
    let g:dein#enable_notification = 1
'''

# ----- tools ----- #
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
    " for macOS
    " let g:python3_host_prog = "/usr/bin/python3"
    " for Ubuntu
    let g:python3_host_prog = "/usr/bin/python3"
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#auto_complete_delay = 0
    let g:deoplete#auto_complete_start_length = 1
    let g:deoplete#enable_refresh_always = 0
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"
    " TABでの補完
    inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ deoplete#mappings#manual_complete()
    function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
    endfunction"}}}

    " preview(ウィンドウ分割されて表示されるやつ)を無効化
    set completeopt-=preview
    set completeopt+=menuone
'''
depends = ['neosnippet.vim', 'neosnippet-snippets']

[[plugins]]
repo = 'Shougo/neosnippet.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'davidhalter/jedi-vim'
hook_add = '''
    let g:jedi#show_call_signatures = "2"
    let g:jedi#goto_command = "<leader>d"
    let g:jedi#goto_assignments_command = "<leader>g"
    let g:jedi#goto_definitions_command = ""
    let g:jedi#documentation_command = "K"
    let g:jedi#usages_command = "<leader>n"
    let g:jedi#completions_command = "<C-Space>"
    let g:jedi#rename_command = "<leader>r"
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
depends = ['deoplete.nvim', 'jedi-vim']

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
    nmap <F8> :TagbarToggle<CR>
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
    let g:go_fmt_fail_silently = 1
    " 保存時にgofmtを走らせない: quickfixが開くのを防ぐ為
    " ⇛ バッファには開かれている…
    let g:go_fmt_autosave = 0

    let g:go_highlight_build_constraints = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_types = 1
    let g:go_auto_sameids = 1
'''

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    function! ALEStatus()
      return ALEGetStatusLine()
    endfunction
    let g:ale_linters = {
    \   'python': ['flake8'],
    \   'go': ['gofmt', 'go vet', 'golint'],
    \}
    let g:ale_sign_column_always = 1
    let g:ale_sign_error = "!!"
    let g:ale_sign_warning = ">>"
    " NeoVimで使うとlightline.vimのレイアウト崩れにつながるので無効化
    " let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '○ OK']
    highlight clear ALEErrorSign
    highlight clear ALEWarningSign
'''

[[plugins]]
repo = 'mattn/sonictemplate-vim'
hook_add = '''
    " let g:sonictemplate_vim_template_dir = '$HOME/git/dotfiles/vim/template'
    let g:sonictemplate_vim_template_dir = '$HOME/repo/dotfiles/vim/template'
'''

[[plugins]]
repo = 'aklt/plantuml-syntax'
hook_add = '''
    let g:plantuml_executable_script = '$HOME/.plantuml'
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
    let g:ctrlp_cmd = 'CtrlPMRU'
'''

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'kannokanno/previm'
hook_add = '''
    augroup PrevimSettings
        autocmd!
        "autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
        autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*,pml} set filetype=markdown
    augroup END
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    let g:NERDTreeDirArrows = 1
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    map <C-n> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'qpkorr/vim-bufkill'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
nmap <Esc><Esc> <Plug>(anzu-clear-search-status)
'''

[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
    " let g:memolist_path = '~/git/memolist/'
    let g:memolist_path = '$HOME/repo/memolist/'
    nmap <Leader>mn :MemoNew<CR>
    nmap <Leader>ml :MemoList<CR>
    nmap <Leader>mg :MemoGrep<CR>
    nmap <Leader>mf :CtrlP g:memolist_path<CR>
'''

# ----- visual ----- #
[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    let g:webdevicons_conceal_nerdtree_brackets = 1
    let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
    let g:DevIconsEnableFoldersOpenClose = 1
    " let g:DevIconsDefaultFolderDefaultSymbol = ''
    " let g:DevIconsDefaultFolderOpenSymbol = ''
    " let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['html'] = ''
    " let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['css'] = ''
    " let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = ''
    " let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['txt'] = ''
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    set laststatus=2
    function! FilePath()
        if winwidth(0) > 90
            return expand("%:s")
        else
            return expand("%:t")
        endif
    endfunction
    " set guifont=Ricty\ Regular\ Powerline:h18
    " FIXME このフォントを使っていると隙間ができる
    " set guifont=RictyDiminished\ Nerd\ Font\ Regular:h18
    let g:lightline = {
        \   'mode_map': {
        \      'c': 'COMMAND',
        \      'i': 'INSERT',
        \      'n': 'NORMAL',
        \      's': 'SELECT',
        \      't': 'TERMINAL',
        \      'v': 'VISUAL',
        \      'R': 'REPLACE',
        \      'S': 'S-LINE',
        \      'V': 'V-LINE',
        \      "\<C-s>": 'S-BLOCK',
        \      "\<C-v>": 'V-BLOCK',
        \   },
        \   'colorscheme': 'powerline',
        \   'component_function': {
        \      'ale': 'ALEStatus',
        \      'filepath': 'FilePath',
        \      'gitbranch': 'fugitive#head',
        \      'anzu': 'anzu#search_status'
        \   },
        \   'component_type': {
        \      'tabs': 'tabsel',
        \      'close': 'raw' 
        \   },
        " 文字幅がNeoVimとVimで異なるようで、この設定を行うとレイアウトがNeoVimで崩れる
        "\   'separator': {
        "\      'left': "\ue0b0",
        "\      'right': "\ue0b2"
        "\   },
        "\   'subseparator': {
        "\      'left': "\ue0b1",
        "\      'right': "\ue0b3"
        "\   },
        \   'tabline': {
        \      'left': [['tabs']],
        \      'right': [['close']]
        \   },
        \   'active': {
        \      'left': [['mode', 'paste'], ['readonly', 'filepath', 'modified', 'gitbranch']],
        \      'right': [['percent', 'lineinfo'], ['ale']],
        \   },
        \   'inactive': {
        \      'left': [['filepath', 'modified', 'gitbranch']],
        \      'right': [['percent', 'lineinfo']],
        \   },
        \ }
'''

## ----- colorscheme ----- ##
[[plugins]]
repo = 'freeo/vim-kalisi'
hook_add = '''
    autocmd MyAutoCmd VimEnter * nested colorscheme kalisi
    autocmd MyAutoCmd VimEnter * nested hi MatchParen ctermfg=green ctermbg=black
'''

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'kristijanhusak/vim-hybrid-material'

[[plugins]]
repo = 'archSeer/colibri.vim'

[[plugins]]
repo = 'fcpg/vim-fahrenheit'

[[plugins]]
repo = 'skielbasa/vim-material-monokai'
